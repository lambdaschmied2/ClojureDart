(ns sample.first-flutter-app-codelabs
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:english_words/english_words.dart" :as english]
    ["dart:core" :as dc]
    [cljd.flutter :as f]))



(defn big-card [^english/WordPair pair]
  (f/widget
    :get {{{:flds [primary
                   onPrimary]} .-colorScheme
           {:flds [displayMedium]} .-textTheme} m/Theme}
    (m/Card
      .color primary)
    (m/Padding
      .padding (m/EdgeInsets.all 20))
    (m/Text
      (.-asLowerCase ^english/WordPair pair)
      .style (.copyWith displayMedium
                        .color onPrimary)
      .semanticsLabel (.-asPascalCase ^english/WordPair
                                      pair))))


(defn random-pair-fn []
      (english/WordPair.random))


(defn generator-page
  [app-st]
  (f/widget
    :watch [{:keys [pair
                    favorites]} app-st]
    :let [icon ^m/IconData (if (favorites pair)
                             m/Icons.favorite
                             m/Icons.favorite_border)]
    m/Center
    (m/Column
     .mainAxisAlignment m/MainAxisAlignment.center
     .children [(big-card pair)
                (m/SizedBox
                  .height 10)
                (m/Row
                  .mainAxisSize m/MainAxisSize.min
                  .children [(m/ElevatedButton.icon
                               .onPressed #(swap! app-st
                                                  (fn [{:keys [favorites
                                                               pair]
                                                        :as data}]
                                                      (-> data
                                                          (assoc :favorites
                                                            (if (favorites pair)
                                                              (into #{}
                                                                    (remove (fn [favorite]
                                                                                (= favorite
                                                                                   pair)))
                                                                    favorites)
                                                              (conj favorites pair))))))

                               .icon (m/Icon icon)
                               .label (m/Text "Like"))
                             (m/SizedBox
                               .width 10)
                             (f/widget
                               (m/ElevatedButton
                                .onPressed #(swap! app-st assoc
                                                   :pair (random-pair-fn)))
                               (m/Text "Next"))])])))


(defn favorites-page
  [app-st]
  (f/widget
    :watch [{:keys [favorites]} app-st]
    :get {{{:flds [primary]} .-colorScheme
           {:flds [displaySmall]} .-textTheme} m/Theme}
    :let [fav-count (count favorites)]
    (if (zero? fav-count)
      (m/Center
        .child (m/Text "No favorites yet!"
                       .style (m/TextStyle
                                .color primary)))
      (f/widget
        m/ListView
        .children (into [(f/widget
                           (m/Padding
                            .padding (m/EdgeInsets.all 20))
                           (m/Text (str "You have " fav-count " favorites")
                                   .style (m/TextStyle
                                            .color primary)))]
                        (map (fn [fav]
                                 (m/ListTile
                                   .leading (m/Icon m/Icons.favorite
                                              .color primary)
                                   .title (m/Text (.-asLowerCase ^english/WordPair
                                                                 fav)
                                                  .style (m/TextStyle
                                                           .color primary)))))
                        favorites)))))



(defn lateral-bar
  [app-st
   constraints]
  (f/widget
    :get {{{:flds [onPrimaryContainer]} .-colorScheme} m/Theme}
    :watch [{:keys [selected-index]} app-st]
    m/Row
    .children [(f/widget
                 m/SafeArea
                 (m/NavigationRail
                   .selectedIndex selected-index
                   .extended (>= (.-maxWidth ^m/BoxConstraints constraints) 600)
                   .onDestinationSelected (fn [value]
                                              (swap! app-st assoc :selected-index value))
                   .destinations [(m/NavigationRailDestination
                                    .icon (m/Icon m/Icons.home)
                                    .label (m/Text "Home"))
                                  (m/NavigationRailDestination
                                    .icon (m/Icon m/Icons.favorite)
                                    .label (m/Text "Favorites"))]))
               (f/widget
                 m/Expanded
                 (m/Container
                   .color onPrimaryContainer
                   .child (case selected-index
                            0 (generator-page app-st)
                            1 (favorites-page app-st))))]))


(defn my-home-page
  [app-st]
  (m/LayoutBuilder
    .builder
    (fn [_ constraints]
        (lateral-bar app-st constraints))))

(def material-app
  (let [app-st (atom {:pair (random-pair-fn)
                      :favorites #{}
                      :selected-index 0})]
       (m/MaterialApp
         .title "My first material app"
         .theme (m/ThemeData
                  .useMaterial3 true
                  .colorScheme (m/ColorScheme.fromSeed
                                 .seedColor m/Colors.deepOrange))
         .home  (f/widget
                  m/Scaffold
                  .body (my-home-page app-st)))))


(defn main []
  (f/run material-app))
